/*
Fitness Function Class Module
-----------------------------
Fitness functions are used to compare candidate solutions generated by the optimization algorithm.
The goal is to provide context for the optimization problem and decouple this context from the optimizer.
An instance of this class returns an object whose attributes should be passed to the GA configuration object.
For example:
    const fitness = new Fitness(...params);
    const ga_config = {
        pop_size: 20,
        .
        .
        .
        ...fitness.get_config(); // <-- Attributes extraction
    }

This attributes are the following:

    - description: Problem description with HTML format.
        * type: Function.
        * input: None.
        * output: Component. 
    - objective: Objective function to maximize or minimize. 
        * type: Function.
        * input: Optimization variable. May be number, array or object.
        * output: Objective output. May be number, array or object.
    - fitness: Fitness function to evaluate and compare solutions.
        * type: Function.
        * input: Array. Encoded candidate solution (genotype).
        * output: Should return a non negative scalar number (integer or float).     
    - decode_nice: Function for decoding a chromosome's genotype returning a human-readable format.
        * type: Function.
        * input: Optimization variable. May be number, array or object.
        * output: String.
    - objective_nice: Objective function to be optimized that returns the output as readable format. 
        * type: Function.
        * input: Array. Encoded optimization variable (gneotype).
        * output: String.
    - rand_encoded: Function to generate a random individual during initialization. 
        * type: Function.
        * input: None.
        * output: Optimization variable. May be number, array or object.

Other GA configuration parameters can be added to overwrite the default ones.
*/

class Fitness { // Fitness model class
    constructor(params) {
        for(let attr in params)
            this[attr] = params[attr];
    }

    _doc() {
        return "N/D";
    }

    _objective(x) {
        return x;
    }

    _fitness(x) {
        return this._objective(x);
    } 

    _decode_nice(b) {
        return b.join("-");
    }

    _objective_nice(x) {
        return x;
    }

    _rand_encoded() {
        return Math.random();
    }

    get config() { // Return references to private methods
        return {
            doc: this._doc,
            objective: this._objective_nice,
            fitness: this._fitness,            
            decode: this._decode_nice,
            rand_encoded: this._rand_encoded
        }
    }
}

export default Fitness;